using System;
using Microsoft.SPOT;
using Microsoft.SPOT.Hardware;

using GT = Gadgeteer;
using GTM = Gadgeteer.Modules;
using GTI = Gadgeteer.SocketInterfaces;
using WS2811;
using System.Threading;

namespace Gadgeteer.Modules.DevhammerEnterprises
{
    /// <summary>
    /// A StarBoard module for Microsoft .NET Gadgeteer
    /// </summary>
    public class StarBoard : GTM.Module
    {
        private GT.Socket socket;

        Thread _starBoardThread;

        private WS2811Led MyWS2811Strip;

        // The triple-slash "///" comments shown will be used in the build process to create an XML file named
        // GTM.DevhammerEnterprises.StarBoard. This file will provide IntelliSense and documentation for the
        // interface and make it easier for developers to use the StarBoard module.        

        // Note: A constructor summary is auto-generated by the doc builder.
        /// <summary></summary>
        /// <param name="socketNumber">The socket that this module is plugged in to.</param>
        public StarBoard(int socketNumber)
        {
            // This finds the Socket instance from the user-specified socket number.  
            // This will generate user-friendly error messages if the socket is invalid.
            // If there is more than one socket on this module, then instead of "null" for the last parameter, 
            // put text that identifies the socket to the user (e.g. "S" if there is a socket type S)
            socket = Socket.GetSocket(socketNumber, true, this, "S");
            socket.EnsureTypeIsSupported('S', this);

            int NumberOfLeds = 13;

            // Initialize the strip : the SPI_Module of the current socket and 800Khz model and using the linear human perceived luminosity PWM conversion factor of 2.25
            MyWS2811Strip = new WS2811Led(NumberOfLeds, socket.SPIModule, WS2811Led.WS2811Speed.S800KHZ, 2.25);
        }

        /// <summary>
        /// Available patterns for the <see cref="StarBoard"/>.
        /// </summary>
        public enum Patterns
        {
            /// <summary>
            /// Heartbeat pattern.
            /// </summary>
            Heartbeat = 0,
            /// <summary>
            /// Red/Green chase pattern.
            /// </summary>
            ChaseRedGreen = 1,
            /// <summary>
            /// Red/Green fade in/out pattern.
            /// </summary>
            FadeInOut = 2,
            /// <summary>
            /// Random Red/White/Green pixel pattern.
            /// </summary>
            RandomRedWhiteGreen = 3,
            /// <summary>
            /// Red/Green alternating expanding ring pattern.
            /// </summary>
            Rings = 4,
            /// <summary>
            /// Red/Green alternating contracting ring pattern.
            /// </summary>
            RingsIn = 5,
            /// <summary>
            /// Red/Green alternating expanding solid ring pattern.
            /// </summary>
            RingsSolid = 6,
            /// <summary>
            /// Red/Green alternating contracting solid ring pattern.
            /// </summary>
            RingsInSolid = 7,
            /// <summary>
            /// Red/Green alternating rotating line pattern.
            /// </summary>
            RotateLinesRG = 8,
            /// <summary>
            /// Red/Green/Blue alternating rotating line pattern.
            /// </summary>
            RotateLinesRGB = 9
        }


        /// <summary>
        /// Shows the selected pattern on the <see cref="StarBoard"/>.
        /// </summary>
        /// <param name="pattern">The <see cref="Patterns"/> to show.</param>
        public void ShowPattern(Patterns pattern)
        {
            switch(pattern)
            {
                case Patterns.ChaseRedGreen:
                    _starBoardThread = new Thread(new ThreadStart(chaseRedGreen));
                    break;
                case Patterns.FadeInOut:
                    _starBoardThread = new Thread(new ThreadStart(fadeInOut));
                    break;
                case Patterns.Heartbeat:
                    _starBoardThread = new Thread(new ThreadStart(heartbeat));
                    break;
                case Patterns.RandomRedWhiteGreen:
                    _starBoardThread = new Thread(new ThreadStart(randomRedGreenPixels));
                    break;
                case Patterns.Rings:
                    _starBoardThread = new Thread(new ThreadStart(rings));
                    break;
                case Patterns.RingsIn:
                    _starBoardThread = new Thread(new ThreadStart(ringsIn));
                    break;
                case Patterns.RingsInSolid:
                    _starBoardThread = new Thread(new ThreadStart(ringsSolidIn));
                    break;
                case Patterns.RingsSolid:
                    _starBoardThread = new Thread(new ThreadStart(ringsSolid));
                    break;
                case Patterns.RotateLinesRG:
                    _starBoardThread = new Thread(new ThreadStart(rotateLines));
                    break;
                case Patterns.RotateLinesRGB:
                    _starBoardThread = new Thread(new ThreadStart(rotateLinesRGB));
                    break;
            }
            _starBoardThread.Start();
        }

        /// <summary>
        /// Sets the color of the specified pixel on the <see cref="StarBoard"/>, based on RGB values.
        /// </summary>
        /// <param name="pixelNum">The number of the pixel to set. Must be from 1 to 13.</param>
        /// <param name="R">Byte value containing the Red portion of the color.</param>
        /// <param name="G">Byte value containing the Green portion of the color.</param>
        /// <param name="B">Byte value containing the Blue portion of the color.</param>
        public void SetPixel(int pixelNum, byte R, byte G, byte B)
        {
            MyWS2811Strip.Set(pixelNum - 1, R, G, B);
            MyWS2811Strip.Transmit();
        }

        /// <summary>
        /// Sets the color of the specified pixel on the <see cref="StarBoard"/>, based on a GT.Color value.
        /// </summary>
        /// <param name="pixelNum">The number of the pixel to set. Must be from 1 to 13.</param>
        /// <param name="color">GT.Color value to set.</param>
        public void SetPixel(int pixelNum, GT.Color color)
        {
            MyWS2811Strip.Set(pixelNum - 1, color.R, color.G, color.B);
            MyWS2811Strip.Transmit();
        }

        /// <summary>
        /// Sets the color of the specified pixels on the <see cref="StarBoard"/>, based on RGB values.
        /// </summary>
        /// <param name="pixelNumStart">The number of the first pixel to set. Must be from 1 to 13.</param>
        /// <param name="pixelNumEnd">The number of the last pixel to set. Must be from 1 to 13 and greater than pixelNumStart.</param>
        /// <param name="color">GT.Color value to set.</param>
        public void SetPixels(int pixelNumStart, int pixelNumEnd, GT.Color color)
        {
            for (int i = pixelNumStart - 1; i < pixelNumEnd; i++)
            {
                MyWS2811Strip.Set(i, color.R, color.G, color.B);
            }
            MyWS2811Strip.Transmit();
        }

        /// <summary>
        /// Sets the color of the specified pixels on the <see cref="StarBoard"/>, based on a GT.Color value.
        /// </summary>
        /// <param name="pixelNumStart">The number of the first pixel to set. Must be from 1 to 13.</param>
        /// <param name="pixelNumEnd">The number of the last pixel to set. Must be from 1 to 13 and greater than pixelNumStart.</param>
        /// <param name="R">Byte value containing the Red portion of the color.</param>
        /// <param name="G">Byte value containing the Green portion of the color.</param>
        /// <param name="B">Byte value containing the Blue portion of the color.</param>
        public void SetPixels(int pixelNumStart, int pixelNumEnd, byte R, byte G, byte B)
        {
            for (int i = pixelNumStart - 1; i < pixelNumEnd; i++)
            {
                MyWS2811Strip.Set(i, R, G, B);
            }
            MyWS2811Strip.Transmit();
        }

        /// <summary>
        /// Clears all LEDs on the <see cref="StarBoard"/>.
        /// </summary>
        public void Clear()
        {
            clear();
        }

        // pattern functions
        private void chaseRedGreen()
        {
            clear();
            for (int i = 0; i < 130; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 13 == 0)
                {
                    clear();
                }

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }

                if (i > 0)
                {
                    MyWS2811Strip.Shift();
                }

                MyWS2811Strip.Set(0, r, g, b);
                MyWS2811Strip.Transmit();

                Thread.Sleep(200);
            }
            clear();
        }

        private void fadeInOut()
        {
            clear();
            for (int i = 0; i < 10; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;
                byte red = 0;
                byte green = 0;
                byte blue = 0;


                if (i % 2 == 0)
                {
                    green = 255;
                }
                else
                {
                    red = 255;
                }

                // fade in 
                for (double p = 0.05; p < 1; p = p + 0.05)
                {
                    r = (byte)(red * p);
                    g = (byte)(green * p);
                    b = (byte)(blue * p);
                    setCenterLED(r, g, b);
                    setRing1LEDs(r, g, b);
                    setRing2LEDs(r, g, b);
                    //setRing3LEDs(r, g, b);

                    Thread.Sleep(50);
                }

                // fade out 
                for (double p = 1; p > 0; p = p - 0.05)
                {
                    r = (byte)(red * p);
                    g = (byte)(green * p);
                    b = (byte)(blue * p);
                    setCenterLED(r, g, b);
                    setRing1LEDs(r, g, b);
                    setRing2LEDs(r, g, b);
                    //setRing3LEDs(r, g, b);

                    Thread.Sleep(50);
                }

                clear();

            }
        }

        private void randomRedGreenPixels()
        {
            clear();
            Random rnd = new Random();
            for (int i = 0; i < 250; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;
                int pixelToBlink = 0;

                pixelToBlink = rnd.Next(13);

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    clear();
                    r = 255;
                }

                if (i % 3 == 0)
                {
                    r = 255;
                    g = 255;
                    b = 255;
                }

                MyWS2811Strip.Set(pixelToBlink, r, g, b);
                MyWS2811Strip.Transmit();

                Thread.Sleep(50);
            }
            clear();
        }

        private void heartbeat()
        {
            clear();

            setCenterLED(64, 0, 0, true);
            setRing1LEDs(64, 0, 0, true);
            setRing2LEDs(64, 0, 0, true);

            Thread.Sleep(150);

            setCenterLED(100, 0, 0, true);

            Thread.Sleep(50);

            setCenterLED(64, 0, 0, true);
            setRing1LEDs(100, 0, 0, true);

            Thread.Sleep(50);

            setRing1LEDs(64, 0, 0, true);
            setRing2LEDs(100, 0, 0, true);

            Thread.Sleep(50);

            setRing2LEDs(64, 0, 0, true);

            Thread.Sleep(150);

            clear();
        }

        private void rings()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }

                setCenterLED(r, g, b, true);

                Thread.Sleep(150);

                setRing1LEDs(r, g, b, true);

                Thread.Sleep(150);

                setRing2LEDs(r, g, b, true);

                Thread.Sleep(150);

                //setRing3LEDs(r, g, b, true);

                //Thread.Sleep(150);

                clear();
            }
        }

        private void ringsIn()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }

                //setRing3LEDs(r, g, b, true);

                //Thread.Sleep(150);

                setRing2LEDs(r, g, b, true);

                Thread.Sleep(150);

                setRing1LEDs(r, g, b, true);

                Thread.Sleep(150);

                setCenterLED(r, g, b, true);

                Thread.Sleep(150);

                clear();
            }
        }

        private void ringsSolid()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }

                setCenterLED(r, g, b);

                Thread.Sleep(250);

                setRing1LEDs(r, g, b);

                Thread.Sleep(250);

                setRing2LEDs(r, g, b);

                Thread.Sleep(250);

                //setRing3LEDs(r, g, b);

                //Thread.Sleep(250);

                clear();

            }
        }

        private void ringsSolidIn()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }


                //setRing3LEDs(r, g, b);

                //Thread.Sleep(250);

                setRing2LEDs(r, g, b);

                Thread.Sleep(250);

                setRing1LEDs(r, g, b);

                Thread.Sleep(250);

                setCenterLED(r, g, b);

                Thread.Sleep(250);

                clear();

            }
        }

        private void rotateLines()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 2 == 0)
                {
                    g = 255;
                }
                else
                {
                    r = 255;
                }

                setVerticalLEDs(r, g, b, true);

                Thread.Sleep(100);

                setSWtoNELEDs(r, g, b, true);

                Thread.Sleep(100);

                setNWtoSELEDs(r, g, b, true);

                Thread.Sleep(100);

                clear();

            }
        }

        private void rotateLinesRGB()
        {
            clear();
            for (int i = 0; i < 12; i++)
            {
                byte r = 0;
                byte g = 0;
                byte b = 0;

                if (i % 3 == 0)
                {
                    g = 255;
                }
                else if (i % 3 == 1)
                {
                    r = 255;
                }
                else
                {
                    b = 255;
                }

                setVerticalLEDs(r, g, b, true);

                Thread.Sleep(100);

                setSWtoNELEDs(r, g, b, true);

                Thread.Sleep(100);

                setNWtoSELEDs(r, g, b, true);

                Thread.Sleep(100);

                clear();

            }
        }


        // internal helper methods for arranging LED patterns
        // set up LED arrangement functions:
        private void setCenterLED(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(2, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void setRing1LEDs(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(1, red, green, blue);
            MyWS2811Strip.Set(3, red, green, blue);
            MyWS2811Strip.Set(5, red, green, blue);
            MyWS2811Strip.Set(7, red, green, blue);
            MyWS2811Strip.Set(9, red, green, blue);
            MyWS2811Strip.Set(11, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void setRing2LEDs(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(0, red, green, blue);
            MyWS2811Strip.Set(4, red, green, blue);
            MyWS2811Strip.Set(6, red, green, blue);
            MyWS2811Strip.Set(8, red, green, blue);
            MyWS2811Strip.Set(10, red, green, blue);
            MyWS2811Strip.Set(12, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void setVerticalLEDs(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(0, red, green, blue);
            MyWS2811Strip.Set(1, red, green, blue);
            MyWS2811Strip.Set(2, red, green, blue);
            MyWS2811Strip.Set(3, red, green, blue);
            MyWS2811Strip.Set(4, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void setSWtoNELEDs(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(6, red, green, blue);
            MyWS2811Strip.Set(5, red, green, blue);
            MyWS2811Strip.Set(2, red, green, blue);
            MyWS2811Strip.Set(11, red, green, blue);
            MyWS2811Strip.Set(12, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void setNWtoSELEDs(byte red, byte green, byte blue, bool clear = false)
        {
            if (clear)
                MyWS2811Strip.Clear();
            MyWS2811Strip.Set(8, red, green, blue);
            MyWS2811Strip.Set(7, red, green, blue);
            MyWS2811Strip.Set(2, red, green, blue);
            MyWS2811Strip.Set(9, red, green, blue);
            MyWS2811Strip.Set(10, red, green, blue);
            MyWS2811Strip.Transmit();
        }

        private void clear()
        {
            MyWS2811Strip.Clear();
            MyWS2811Strip.Transmit();
        }
    }
}
